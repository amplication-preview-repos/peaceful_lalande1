/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Management } from "./Management";
import { ManagementCountArgs } from "./ManagementCountArgs";
import { ManagementFindManyArgs } from "./ManagementFindManyArgs";
import { ManagementFindUniqueArgs } from "./ManagementFindUniqueArgs";
import { CreateManagementArgs } from "./CreateManagementArgs";
import { UpdateManagementArgs } from "./UpdateManagementArgs";
import { DeleteManagementArgs } from "./DeleteManagementArgs";
import { ManagementService } from "../management.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Management)
export class ManagementResolverBase {
  constructor(
    protected readonly service: ManagementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Management",
    action: "read",
    possession: "any",
  })
  async _managementsMeta(
    @graphql.Args() args: ManagementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Management])
  @nestAccessControl.UseRoles({
    resource: "Management",
    action: "read",
    possession: "any",
  })
  async managements(
    @graphql.Args() args: ManagementFindManyArgs
  ): Promise<Management[]> {
    return this.service.managements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Management, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Management",
    action: "read",
    possession: "own",
  })
  async management(
    @graphql.Args() args: ManagementFindUniqueArgs
  ): Promise<Management | null> {
    const result = await this.service.management(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Management)
  @nestAccessControl.UseRoles({
    resource: "Management",
    action: "create",
    possession: "any",
  })
  async createManagement(
    @graphql.Args() args: CreateManagementArgs
  ): Promise<Management> {
    return await this.service.createManagement({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Management)
  @nestAccessControl.UseRoles({
    resource: "Management",
    action: "update",
    possession: "any",
  })
  async updateManagement(
    @graphql.Args() args: UpdateManagementArgs
  ): Promise<Management | null> {
    try {
      return await this.service.updateManagement({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Management)
  @nestAccessControl.UseRoles({
    resource: "Management",
    action: "delete",
    possession: "any",
  })
  async deleteManagement(
    @graphql.Args() args: DeleteManagementArgs
  ): Promise<Management | null> {
    try {
      return await this.service.deleteManagement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
