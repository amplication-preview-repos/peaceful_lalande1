/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GuestRegistration } from "./GuestRegistration";
import { GuestRegistrationCountArgs } from "./GuestRegistrationCountArgs";
import { GuestRegistrationFindManyArgs } from "./GuestRegistrationFindManyArgs";
import { GuestRegistrationFindUniqueArgs } from "./GuestRegistrationFindUniqueArgs";
import { CreateGuestRegistrationArgs } from "./CreateGuestRegistrationArgs";
import { UpdateGuestRegistrationArgs } from "./UpdateGuestRegistrationArgs";
import { DeleteGuestRegistrationArgs } from "./DeleteGuestRegistrationArgs";
import { GuestRegistrationService } from "../guestRegistration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GuestRegistration)
export class GuestRegistrationResolverBase {
  constructor(
    protected readonly service: GuestRegistrationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GuestRegistration",
    action: "read",
    possession: "any",
  })
  async _guestRegistrationsMeta(
    @graphql.Args() args: GuestRegistrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GuestRegistration])
  @nestAccessControl.UseRoles({
    resource: "GuestRegistration",
    action: "read",
    possession: "any",
  })
  async guestRegistrations(
    @graphql.Args() args: GuestRegistrationFindManyArgs
  ): Promise<GuestRegistration[]> {
    return this.service.guestRegistrations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GuestRegistration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GuestRegistration",
    action: "read",
    possession: "own",
  })
  async guestRegistration(
    @graphql.Args() args: GuestRegistrationFindUniqueArgs
  ): Promise<GuestRegistration | null> {
    const result = await this.service.guestRegistration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuestRegistration)
  @nestAccessControl.UseRoles({
    resource: "GuestRegistration",
    action: "create",
    possession: "any",
  })
  async createGuestRegistration(
    @graphql.Args() args: CreateGuestRegistrationArgs
  ): Promise<GuestRegistration> {
    return await this.service.createGuestRegistration({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuestRegistration)
  @nestAccessControl.UseRoles({
    resource: "GuestRegistration",
    action: "update",
    possession: "any",
  })
  async updateGuestRegistration(
    @graphql.Args() args: UpdateGuestRegistrationArgs
  ): Promise<GuestRegistration | null> {
    try {
      return await this.service.updateGuestRegistration({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuestRegistration)
  @nestAccessControl.UseRoles({
    resource: "GuestRegistration",
    action: "delete",
    possession: "any",
  })
  async deleteGuestRegistration(
    @graphql.Args() args: DeleteGuestRegistrationArgs
  ): Promise<GuestRegistration | null> {
    try {
      return await this.service.deleteGuestRegistration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
